/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import Modelo.RenglonMenu;
import Persistencia.RenglonMenuData;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MOON
 */
public class RenglonMenuVista extends javax.swing.JInternalFrame {
    
    private RenglonMenuData renglonMenuData = new RenglonMenuData();

    /**
     * Creates new form RenglonMenu
     */
    public RenglonMenuVista() {
        initComponents();
        agregarOyentes();
        cargarComidasEnComboBox();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboComida = new javax.swing.JComboBox<>();
        jNumRenglon = new javax.swing.JTextField();
        jCantidad = new javax.swing.JTextField();
        jSubCalorias = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        Guardar = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        Buscar = new javax.swing.JButton();

        setClosable(true);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("RENGLON MENU");

        jLabel1.setText("Numero de Renglon: ");

        jLabel2.setText("Comida:");

        jLabel3.setText("Cantidad (g): ");

        jLabel4.setText("Subtotal de Calorias: ");

        jComboComida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboComidaActionPerformed(evt);
            }
        });

        jNumRenglon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNumRenglonActionPerformed(evt);
            }
        });

        jCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCantidadActionPerformed(evt);
            }
        });

        jTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nro Renglon", "Comida", "Cantidad", "Sbutotal Cal"
            }
        ));
        jScrollPane1.setViewportView(jTableData);

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Guardar)
                                .addGap(18, 18, 18)
                                .addComponent(Modificar)
                                .addGap(18, 18, 18)
                                .addComponent(Eliminar)
                                .addGap(18, 18, 18)
                                .addComponent(Buscar))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(jSubCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jLabel3))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCantidad)
                                        .addComponent(jNumRenglon)
                                        .addComponent(jComboComida, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jNumRenglon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboComida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jSubCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Guardar)
                    .addComponent(Modificar)
                    .addComponent(Eliminar)
                    .addComponent(Buscar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNumRenglonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNumRenglonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNumRenglonActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        guardarRenglon();
    }//GEN-LAST:event_GuardarActionPerformed

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        // TODO add your handling code here:
        modificarRenglon();
    }//GEN-LAST:event_ModificarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
        eliminarRenglon();
    }//GEN-LAST:event_EliminarActionPerformed

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        // TODO add your handling code here:
        buscarRenglon();
    }//GEN-LAST:event_BuscarActionPerformed

    private void jComboComidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboComidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboComidaActionPerformed

    private void jCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCantidadActionPerformed

    private void calcularSubCalorias() {
        try {
            String alimento = jComboComida.getSelectedItem().toString();
            double cantidad = Double.parseDouble(jCantidad.getText().trim());
            int caloriasPorPorcion = obtenerCaloriasPorPorcion(alimento);
            int subtotalCalorias = (int)(cantidad * caloriasPorPorcion);
            jSubCalorias.setText(String.valueOf(subtotalCalorias));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese una cantidad válida en formato numérico.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
private void guardarRenglon() {
    try {
        int codMenu = Integer.parseInt(jNumRenglon.getText().trim());
        String nombreComida = (String) jComboComida.getSelectedItem();
        if (nombreComida == null || nombreComida.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Seleccione una comida válida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int codComida = renglonMenuData.obtenerCodigoComidaPorNombre(nombreComida);
        if (codComida == -1) {
            JOptionPane.showMessageDialog(this, "No se encontró el código de la comida seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double cantidad;
        try {
            cantidad = Double.parseDouble(jCantidad.getText().trim());
            if (cantidad <= 0) {
                JOptionPane.showMessageDialog(this, "La cantidad debe ser un número positivo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese una cantidad válida.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int subtotalCalorias;
        try {
            subtotalCalorias = Integer.parseInt(jSubCalorias.getText().trim());
            if (subtotalCalorias <= 0) {
                JOptionPane.showMessageDialog(this, "El subtotal de calorías debe ser un número positivo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un subtotal de calorías válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        RenglonMenu renglonMenu = new RenglonMenu(codMenu, codComida, cantidad, subtotalCalorias);
        try {
            renglonMenuData.agregarRenglonMenu(renglonMenu);
            actualizarTabla();
            JOptionPane.showMessageDialog(this, "Renglón guardado correctamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el renglón: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese datos válidos en los campos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    
    private void buscarRenglon() {
        try {
            int nroRenglon = Integer.parseInt(jNumRenglon.getText().trim());
            RenglonMenu renglonMenu = renglonMenuData.buscarRenglonPorNumero(nroRenglon);

            if (renglonMenu != null) {
                jComboComida.setSelectedItem(renglonMenu.getCodComida());
                jCantidad.setText(String.valueOf(renglonMenu.getCantidadGramos()));
                jSubCalorias.setText(String.valueOf(renglonMenu.getSubtotalCalorias()));
            } else {
                JOptionPane.showMessageDialog(this, "Renglón no encontrado.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un número de renglón válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void modificarRenglon() {
    try {
        int nroRenglon = Integer.parseInt(jNumRenglon.getText().trim());
        String nombreComida = jComboComida.getSelectedItem().toString();
        int codComida = renglonMenuData.obtenerCodigoComidaPorNombre(nombreComida);
        double cantidad = Double.parseDouble(jCantidad.getText().trim());
        int subCalorias = Integer.parseInt(jSubCalorias.getText().trim());

        if (codComida != -1) {
            RenglonMenu renglonMenu = new RenglonMenu(nroRenglon, codComida, cantidad, subCalorias);
            renglonMenuData.actualizarRenglonMenu(renglonMenu);
            actualizarTabla();
            JOptionPane.showMessageDialog(this, "Renglón modificado correctamente.");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el código de la comida seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese datos válidos en los campos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }

    private void eliminarRenglon() {
        try {
            int nroRenglon = Integer.parseInt(jNumRenglon.getText().trim());
            renglonMenuData.eliminarRenglonMenu(nroRenglon);
            actualizarTabla();
            JOptionPane.showMessageDialog(this, "Renglón eliminado correctamente.");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un número de renglón válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarTabla() {
        List<RenglonMenu> renglones = renglonMenuData.obtenerTodosLosRenglones();
        DefaultTableModel model = (DefaultTableModel) jTableData.getModel();
        model.setRowCount(0);

        for (RenglonMenu renglon : renglones) {
            model.addRow(new Object[]{
                renglon.getCodMenu(),
                renglon.getCodComida(),
                renglon.getCantidadGramos(),
                renglon.getSubtotalCalorias()
            });
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton Modificar;
    private javax.swing.JTextField jCantidad;
    private javax.swing.JComboBox<String> jComboComida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jNumRenglon;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jSubCalorias;
    private javax.swing.JTable jTableData;
    // End of variables declaration//GEN-END:variables

    private int obtenerCaloriasPorPorcion(String alimento) {
        return renglonMenuData.obtenerCaloriasPorComida(alimento);
    }

    private void agregarOyentes() {
        jCantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                calcularSubCalorias();
            }
        });
    }
    
    private void cargarComidasEnComboBox() {
        List<String> comidas = renglonMenuData.obtenerNombresComidas();
        jComboComida.removeAllItems();
        for (String comida : comidas) {
            jComboComida.addItem(comida);
        }
    }
}
