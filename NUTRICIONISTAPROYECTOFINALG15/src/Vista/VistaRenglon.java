/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.RenglonMenu;
import Persistencia.RenglonMenuData;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FrancoPC
 */
public class VistaRenglon extends javax.swing.JPanel {

    private RenglonMenuData renglonMenuData = new RenglonMenuData();
    
    public VistaRenglon() {
        initComponents();
        agregarOyentes();
        cargarComidasEnComboBox();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfRenglon = new javax.swing.JTextField();
        jcbComida = new javax.swing.JComboBox<>();
        jtfCantidad = new javax.swing.JTextField();
        jtfTotalCal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtRenglon = new javax.swing.JTable();
        jbBuscar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(740, 430));
        setMinimumSize(new java.awt.Dimension(740, 430));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(740, 430));
        jPanel1.setMinimumSize(new java.awt.Dimension(740, 430));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("RENGLON MENU");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("N° De Renglon:");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Comida:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Cantidad (g):");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Subtotal De Calorias:");

        jtfRenglon.setBackground(new java.awt.Color(255, 255, 255));
        jtfRenglon.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jtfRenglon.setForeground(new java.awt.Color(0, 0, 0));

        jcbComida.setBackground(new java.awt.Color(255, 255, 255));
        jcbComida.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jcbComida.setForeground(new java.awt.Color(0, 0, 0));

        jtfCantidad.setBackground(new java.awt.Color(255, 255, 255));
        jtfCantidad.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jtfCantidad.setForeground(new java.awt.Color(0, 0, 0));

        jtfTotalCal.setBackground(new java.awt.Color(255, 255, 255));
        jtfTotalCal.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jtfTotalCal.setForeground(new java.awt.Color(0, 0, 0));

        jtRenglon.setBackground(new java.awt.Color(255, 255, 255));
        jtRenglon.setForeground(new java.awt.Color(0, 0, 0));
        jtRenglon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "N° Renglon", "Comida", "Cantidad", "Subtotal Calorias"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtRenglon);

        jbBuscar.setBackground(new java.awt.Color(0, 153, 0));
        jbBuscar.setIcon(new javax.swing.ImageIcon("D:\\Franco\\ULP\\02. Materias\\1°Año\\2°Cuatrimestre\\Lab. de Programación\\6-Proyecto Final\\Proyect_Final\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\NUTRICIONISTAPROYECTOFINALG15\\src\\imagenes\\lupa.png")); // NOI18N
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbEditar.setBackground(new java.awt.Color(51, 153, 0));
        jbEditar.setIcon(new javax.swing.ImageIcon("D:\\Franco\\ULP\\02. Materias\\1°Año\\2°Cuatrimestre\\Lab. de Programación\\6-Proyecto Final\\Proyect_Final\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\NUTRICIONISTAPROYECTOFINALG15\\src\\imagenes\\editar.png")); // NOI18N
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbGuardar.setBackground(new java.awt.Color(51, 153, 0));
        jbGuardar.setIcon(new javax.swing.ImageIcon("D:\\Franco\\ULP\\02. Materias\\1°Año\\2°Cuatrimestre\\Lab. de Programación\\6-Proyecto Final\\Proyect_Final\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\NUTRICIONISTAPROYECTOFINALG15\\src\\imagenes\\guardar.png")); // NOI18N
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbBorrar.setBackground(new java.awt.Color(51, 153, 0));
        jbBorrar.setIcon(new javax.swing.ImageIcon("D:\\Franco\\ULP\\02. Materias\\1°Año\\2°Cuatrimestre\\Lab. de Programación\\6-Proyecto Final\\Proyect_Final\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\--PROYECTO-de-la-REALIDAD--NUTRICIONISTA\\NUTRICIONISTAPROYECTOFINALG15\\src\\imagenes\\tacho.png")); // NOI18N
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(313, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(126, 126, 126))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jtfCantidad)
                                    .addComponent(jtfRenglon, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbComida, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jtfTotalCal, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jbBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbEditar))
                    .addComponent(jbBuscar))
                .addGap(69, 69, 69))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 18, Short.MAX_VALUE)
                        .addComponent(jbBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(jbEditar)
                        .addGap(18, 18, 18)
                        .addComponent(jbGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(jbBorrar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtfRenglon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jcbComida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtfCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jtfTotalCal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
            buscarRenglon();
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
            modificarRenglon();
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
            guardarRenglon();
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
            eliminarRenglon();
    }//GEN-LAST:event_jbBorrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JComboBox<String> jcbComida;
    private javax.swing.JTable jtRenglon;
    private javax.swing.JTextField jtfCantidad;
    private javax.swing.JTextField jtfRenglon;
    private javax.swing.JTextField jtfTotalCal;
    // End of variables declaration//GEN-END:variables

    private void agregarOyentes() {
        
        jtfCantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                calcularSubCalorias();
            }
        });
    }
    
    private void cargarComidasEnComboBox() {
        
        List<String> comidas = renglonMenuData.obtenerNombresComidas();
        
        jcbComida.removeAllItems();
        
        for (String comida : comidas) {
            jcbComida.addItem(comida);
        }
    }
    
    private void actualizarTabla() {
        List<RenglonMenu> renglones = renglonMenuData.obtenerTodosLosRenglones();
        DefaultTableModel model = (DefaultTableModel) jtRenglon.getModel();
        model.setRowCount(0);

        for (RenglonMenu renglon : renglones) {
            model.addRow(new Object[]{
                renglon.getCodMenu(),
                renglon.getCodComida(),
                renglon.getCantidadGramos(),
                renglon.getSubtotalCalorias()
            });
        }
    }
    
    private void calcularSubCalorias() {
        
        try {
            String alimento = jcbComida.getSelectedItem().toString();
            double cantidad = Double.parseDouble(jtfCantidad.getText().trim());
            int caloriasPorPorcion = obtenerCaloriasPorPorcion(alimento);
            int subtotalCalorias = (int)(cantidad * caloriasPorPorcion);
            jtfTotalCal.setText(String.valueOf(subtotalCalorias));
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese una cantidad válida en formato numérico.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void guardarRenglon() {
        
        try {
            int codMenu = Integer.parseInt(jtfRenglon.getText().trim());
            String nombreComida = (String) jcbComida.getSelectedItem();
            
            if (nombreComida == null || nombreComida.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Seleccione una comida válida.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int codComida = renglonMenuData.obtenerCodigoComidaPorNombre(nombreComida);
            
            if (codComida == -1) {
                JOptionPane.showMessageDialog(this, "No se encontró el código de la comida seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double cantidad;
            
            try {
                cantidad = Double.parseDouble(jtfCantidad.getText().trim());
                
                if (cantidad <= 0) {
                    JOptionPane.showMessageDialog(this, "La cantidad debe ser un número positivo.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Ingrese una cantidad válida.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int subtotalCalorias;
            
            try {
                subtotalCalorias = Integer.parseInt(jtfTotalCal.getText().trim());
                if (subtotalCalorias <= 0) {
                    JOptionPane.showMessageDialog(this, "El subtotal de calorías debe ser un número positivo.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Ingrese un subtotal de calorías válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            RenglonMenu renglonMenu = new RenglonMenu(codMenu, codComida, cantidad, subtotalCalorias);
            
            try {
                renglonMenuData.agregarRenglonMenu(renglonMenu);
                actualizarTabla();
                JOptionPane.showMessageDialog(this, "Renglón guardado correctamente.");
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el renglón: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese datos válidos en los campos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void buscarRenglon() {
        try {
            
            int nroRenglon = Integer.parseInt(jtfRenglon.getText().trim());
            
            RenglonMenu renglonMenu = renglonMenuData.buscarRenglonPorNumero(nroRenglon);

            if (renglonMenu != null) {
                jcbComida.setSelectedItem(renglonMenu.getCodComida());
                jtfCantidad.setText(String.valueOf(renglonMenu.getCantidadGramos()));
                jtfTotalCal.setText(String.valueOf(renglonMenu.getSubtotalCalorias()));
            } else {
                JOptionPane.showMessageDialog(this, "Renglón no encontrado.");
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un número de renglón válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void modificarRenglon() {
        try {
            int nroRenglon = Integer.parseInt(jtfRenglon.getText().trim());
            String nombreComida = jcbComida.getSelectedItem().toString();
            int codComida = renglonMenuData.obtenerCodigoComidaPorNombre(nombreComida);
            double cantidad = Double.parseDouble(jtfCantidad.getText().trim());
            int subCalorias = Integer.parseInt(jtfTotalCal.getText().trim());

            if (codComida != -1) {
                RenglonMenu renglonMenu = new RenglonMenu(nroRenglon, codComida, cantidad, subCalorias);
                renglonMenuData.actualizarRenglonMenu(renglonMenu);
                actualizarTabla();
                JOptionPane.showMessageDialog(this, "Renglón modificado correctamente.");
                
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el código de la comida seleccionada.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese datos válidos en los campos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void eliminarRenglon() {
        try {
            
            int nroRenglon = Integer.parseInt(jtfRenglon.getText().trim());
            renglonMenuData.eliminarRenglonMenu(nroRenglon);
            actualizarTabla();
            JOptionPane.showMessageDialog(this, "Renglón eliminado correctamente.");
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un número de renglón válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private int obtenerCaloriasPorPorcion(String alimento) {
        return renglonMenuData.obtenerCaloriasPorComida(alimento);
    }
}
